// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/protomem/chatik/internal/core/data (interfaces: LastSeen)
//
// Generated by this command:
//
//	mockgen -destination mocks/last_seen.go -package mocks . LastSeen
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	entity "github.com/protomem/chatik/internal/core/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockLastSeen is a mock of LastSeen interface.
type MockLastSeen struct {
	ctrl     *gomock.Controller
	recorder *MockLastSeenMockRecorder
}

// MockLastSeenMockRecorder is the mock recorder for MockLastSeen.
type MockLastSeenMockRecorder struct {
	mock *MockLastSeen
}

// NewMockLastSeen creates a new mock instance.
func NewMockLastSeen(ctrl *gomock.Controller) *MockLastSeen {
	mock := &MockLastSeen{ctrl: ctrl}
	mock.recorder = &MockLastSeenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLastSeen) EXPECT() *MockLastSeenMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockLastSeen) Read(arg0 context.Context, arg1 uuid.UUID) ([]entity.LastSeenLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].([]entity.LastSeenLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockLastSeenMockRecorder) Read(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockLastSeen)(nil).Read), arg0, arg1)
}

// Write mocks base method.
func (m *MockLastSeen) Write(arg0 context.Context, arg1 entity.LastSeenLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockLastSeenMockRecorder) Write(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockLastSeen)(nil).Write), arg0, arg1)
}

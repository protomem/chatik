// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/protomem/chatik/internal/core/data (interfaces: MessageAccessor,MessageMutator)
//
// Generated by this command:
//
//	mockgen -destination mocks/message.go -package mocks . MessageAccessor,MessageMutator
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	data "github.com/protomem/chatik/internal/core/data"
	entity "github.com/protomem/chatik/internal/core/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageAccessor is a mock of MessageAccessor interface.
type MockMessageAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockMessageAccessorMockRecorder
}

// MockMessageAccessorMockRecorder is the mock recorder for MockMessageAccessor.
type MockMessageAccessorMockRecorder struct {
	mock *MockMessageAccessor
}

// NewMockMessageAccessor creates a new mock instance.
func NewMockMessageAccessor(ctrl *gomock.Controller) *MockMessageAccessor {
	mock := &MockMessageAccessor{ctrl: ctrl}
	mock.recorder = &MockMessageAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageAccessor) EXPECT() *MockMessageAccessorMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockMessageAccessor) Get(arg0 context.Context, arg1 uuid.UUID) (entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMessageAccessorMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMessageAccessor)(nil).Get), arg0, arg1)
}

// SelectByFromAndTo mocks base method.
func (m *MockMessageAccessor) SelectByFromAndTo(arg0 context.Context, arg1 data.SelectMessageByFromAndToOptions) ([]entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByFromAndTo", arg0, arg1)
	ret0, _ := ret[0].([]entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByFromAndTo indicates an expected call of SelectByFromAndTo.
func (mr *MockMessageAccessorMockRecorder) SelectByFromAndTo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByFromAndTo", reflect.TypeOf((*MockMessageAccessor)(nil).SelectByFromAndTo), arg0, arg1)
}

// MockMessageMutator is a mock of MessageMutator interface.
type MockMessageMutator struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMutatorMockRecorder
}

// MockMessageMutatorMockRecorder is the mock recorder for MockMessageMutator.
type MockMessageMutatorMockRecorder struct {
	mock *MockMessageMutator
}

// NewMockMessageMutator creates a new mock instance.
func NewMockMessageMutator(ctrl *gomock.Controller) *MockMessageMutator {
	mock := &MockMessageMutator{ctrl: ctrl}
	mock.recorder = &MockMessageMutatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageMutator) EXPECT() *MockMessageMutatorMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockMessageMutator) Insert(arg0 context.Context, arg1 data.InsertMessageDTO) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockMessageMutatorMockRecorder) Insert(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockMessageMutator)(nil).Insert), arg0, arg1)
}
